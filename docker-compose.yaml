services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi-app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres
      - TEMPORAL_SERVER_URL=temporal:7233
    networks:
      - app-network

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: temporal-worker
    command: poetry run python src/worker_repo_indexing.py
    depends_on:
      - postgres
      - temporal
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres
      - TEMPORAL_SERVER_URL=temporal:7233
    networks:
      - app-network

  postgres:
    container_name: postgres
    image: pgvector/pgvector:pg15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  temporal:
    container_name: temporal
    image: temporalio/auto-setup:latest
    ports:
      - "7233:7233"
    environment:
      - TEMPORALITE_DB_FILENAME=/data/temporal.db
    volumes:
      - temporal_data:/data
    networks:
      - app-network

  temporal-ui:
    container_name: temporal-ui
    image: temporalio/web:latest
    ports:
      - "8233:8233"
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
    depends_on:
      - temporal
    networks:
      - app-network

  ngrok:
    image: ngrok/ngrok:latest
    container_name: ngrok
    ports:
      - "4040:4040"
    environment:
      - NGROK_AUTHTOKEN=$NGROK_AUTHTOKEN
    command: http app:8000
    depends_on:
      - app
    networks:
      - app-network

volumes:
  postgres_data:
  temporal_data:

networks:
  app-network:
